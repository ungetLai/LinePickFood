
const express = require('express');
const { middleware, Client } = require('@line/bot-sdk');
const { Client: MapsClient } = require('@googlemaps/google-maps-services-js');
const getRawBody = require('raw-body');
require('dotenv').config();

const app = express();
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};
const client = new Client(config);
const mapsClient = new MapsClient({});
const userSessions = new Map();
const userPrevPlaces = new Map();
const userCache = new Map();
const conditionSessions = new Map();

app.use((req, res, next) => {
  getRawBody(req, {
    length: req.headers['content-length'],
    limit: '1mb',
    encoding: 'utf-8'
  }).then((buf) => {
    req.rawBody = buf;
    req.body = JSON.parse(buf);
    next();
  }).catch((err) => {
    res.status(400).send('Invalid body');
  });
});
app.use(middleware(config));

app.post('/api/webhook', async (req, res) => {
  try {
    await Promise.all(req.body.events.map(event => handleEvent(event)));
    res.status(200).send('OK');
  } catch (err) {
    console.error(err);
    res.status(500).send('Error');
  }
});

async function handleEvent(event) {
  const userId = event.source.userId;
  const message = event.message;

  if (event.type === 'message') {
    const text = message.text?.trim();
    const session = conditionSessions.get(userId);
  
    if (message.type === 'location') {
      const { latitude, longitude } = message;
      return await handleSearch(latitude, longitude, event.replyToken, userId);
    }
  
    // ÈùûÊñáÂ≠óÈ°ûÂûãÔºàÂúñÁâá„ÄÅË≤ºÂúñ„ÄÅË™ûÈü≥Á≠âÔºâ
    if (message.type !== 'text') {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: 'Ë´ãÈªûÈÅ∏Ëº∏ÂÖ•Ê°ÜÂ∑¶ÂÅ¥ÁöÑ„ÄåÔºã„Äç‰∏¶ÈÅ∏Êìá„Äå‰ΩçÁΩÆË≥áË®ä üìç„Äç\nÊàñËº∏ÂÖ•‰∏ÄÂÄãÊòéÈ°ØÁöÑÂú∞ÈªûÂêçÁ®±Ôºà‰æãÂ¶Ç„ÄåÂè∞ÂåóËªäÁ´ô„ÄçÔºâ‰ª•Áç≤ÂæóÈôÑËøëÁæéÈ£üÊé®Ëñ¶ üç±'
      });
    }
  
    // ÂïüÂãïÊ¢ù‰ª∂Êé®Ëñ¶
    if (text === 'ÈñãÂßãÊ¢ù‰ª∂Êé®Ëñ¶') {
      conditionSessions.set(userId, { step: 'cuisine' });
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: 'üçú ÊÉ≥ÂêÉ‰ªÄÈ∫ºÊñôÁêÜÔºüÔºà‰∏≠Âºè„ÄÅÊó•Âºè„ÄÅË•øÂºè„ÄÅÈüìÂºè„ÄÅÂè∞Âºè„ÄÅ‰∏çÈôêÔºâ'
      });
    }
  
    if (session) {
      if (session.step === 'cuisine') {
        session.cuisine = ['‰∏≠Âºè', 'Êó•Âºè', 'Ë•øÂºè', 'ÈüìÂºè', 'Âè∞Âºè'].includes(text) ? text : '‰∏çÈôê';
        session.step = 'rating';
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‚≠ê ÊÉ≥ÊâæÂπæÊòü‰ª•‰∏äÁöÑÈ§êÂª≥ÔºüÔºàËº∏ÂÖ• 1ÔΩû5ÔºåÈ†êË®≠ 3Ôºâ'
        });
      }
      if (session.step === 'rating') {
        const rating = parseFloat(text);
        session.rating = (rating >= 1 && rating <= 5) ? rating : 3;
        session.step = 'radius';
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: 'üìè ÊÉ≥ÊêúÂ∞ãÂ§öÈÅ†ÁØÑÂúçÔºüË´ãËº∏ÂÖ•ÂÖ¨Â∞∫Êï∏Ôºà300ÔΩû5000ÔºåÈ†êË®≠ 2000Ôºâ'
        });
      }
      if (session.step === 'radius') {
        const r = parseInt(text);
        session.radius = (r >= 300 && r <= 5000) ? r : 2000;
        session.step = 'location';
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: 'üìç Ë´ãËº∏ÂÖ•ÈôÑËøëÊòéÈ°ØÂú∞ÈªûÔºàÂ¶Ç Âè∞ÂåóËªäÁ´ôÔºâ'
        });
      }
      if (session.step === 'location') {
        const geo = await mapsClient.geocode({
          params: { address: text, key: process.env.GOOGLE_MAPS_API_KEY }
        });
        if (!geo.data.results.length) {
          return client.replyMessage(event.replyToken, {
            type: 'text',
            text: '‚ùå Êâæ‰∏çÂà∞Ê≠§Âú∞ÈªûÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°'
          });
        }
  
        const { lat, lng } = geo.data.results[0].geometry.location;
        const cuisineMap = {
          ‰∏≠Âºè: ['chinese'],
          Êó•Âºè: ['japanese'],
          Ë•øÂºè: ['western', 'american'],
          ÈüìÂºè: ['korean'],
          Âè∞Âºè: ['taiwanese']
        };
        const keywords = cuisineMap[session.cuisine] || [];
  
        const res = await mapsClient.placesNearby({
          params: {
            location: { lat, lng },
            radius: session.radius,
            type: 'restaurant',
            key: process.env.GOOGLE_MAPS_API_KEY
          }
        });
  
        const results = res.data.results.filter(p =>
          p.rating >= session.rating &&
          p.opening_hours?.open_now &&
          (keywords.length === 0 || keywords.some(k => (p.name + p.types.join()).toLowerCase().includes(k)))
        ).sort(() => Math.random() - 0.5).slice(0, 3);
  
        conditionSessions.delete(userId);
  
        if (!results.length) {
          return client.replyMessage(event.replyToken, {
            type: 'text',
            text: 'ü•≤ Êâæ‰∏çÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÈ§êÂª≥ÔºåË´ãÈáçÊñ∞Ë®≠ÂÆöÊ¢ù‰ª∂ÊàñÊèõÂÄãÂú∞ÈªûË©¶Ë©¶'
          });
        }
  
        return client.replyMessage(event.replyToken, createFlex(results));
      }
    }
  
    // ÈùûÊ¢ù‰ª∂ÊµÅÁ®ãÔºåÂòóË©¶Áï∂Âú∞ÈªûÊü•Ë©¢
    try {
      const geo = await mapsClient.geocode({
        params: {
          address: text,
          key: process.env.GOOGLE_MAPS_API_KEY
        }
      });
      if (!geo.data.results.length) throw new Error();
      const { lat, lng } = geo.data.results[0].geometry.location;
      return await handleSearch(lat, lng, event.replyToken, userId);
    } catch {
      return client.replyMessage(event.replyToken, [
        {
          type: 'text',
          text: 'Ë´ãÂÇ≥ÈÄÅÊÇ®ÁõÆÂâçÁöÑ‰ΩçÁΩÆÔºåÊàñËº∏ÂÖ•ÊúâÊïàÂú∞ÈªûÂêçÁ®±ÔºàÂ¶Ç„ÄåÂè∞ÂåóËªäÁ´ô„ÄçÔºâ‰ª•Êé®Ëñ¶ÈôÑËøëÁæéÈ£ü üç±'
        },
        {
          type: 'flex',
          altText: 'Ê¢ù‰ª∂Êé®Ëñ¶',
          contents: {
            type: 'bubble',
            body: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: 'ÊÉ≥Ë¶ÅÊõ¥Á≤æÊ∫ñÊé®Ëñ¶Ôºü',
                  weight: 'bold',
                  size: 'md',
                  wrap: true
                },
                {
                  type: 'button',
                  style: 'primary',
                  margin: 'lg',
                  action: {
                    type: 'message',
                    label: 'üîç Ë®≠ÂÆöÊ¢ù‰ª∂Êé®Ëñ¶',
                    text: 'ÈñãÂßãÊ¢ù‰ª∂Êé®Ëñ¶'
                  }
                }
              ]
            }
          }
        }
      ]);
    }
  }

  if (event.type === 'postback') {
    const data = JSON.parse(event.postback.data);
    const userId = event.source.userId;
    if (data.action === 'navigate') {
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: `üö∂‚Äç‚ôÇÔ∏è ÂâçÂæÄ ${data.name}Ôºöhttps://www.google.com/maps/dir/?api=1&destination=${data.latitude},${data.longitude}`
      });
    }
    if (data.action === 'recommend') {
      const all = userCache.get(userId) || [];
      const used = userPrevPlaces.get(userId) || [];
      const remaining = all.filter(p => !used.includes(p.place_id));
      if (!remaining.length) {
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: 'ÈôÑËøëÁöÑÈ§êÂª≥ÈÉΩÊé®Ëñ¶ÈÅéÂõâÔΩûË´ãÂÇ≥ÈÄÅÊñ∞‰ΩçÁΩÆÂÜçÊé¢Á¥¢ üçú'
        });
      }
      const selected = remaining.slice(0, 3);
      userPrevPlaces.set(userId, used.concat(selected.map(p => p.place_id)));
      return client.replyMessage(event.replyToken, createFlex(selected));
    }
  }
}

async function handleSearch(lat, lng, replyToken, userId) {
  const res = await mapsClient.placesNearby({
    params: {
      location: { lat, lng },
      radius: 2000,
      type: 'restaurant',
      key: process.env.GOOGLE_MAPS_API_KEY
    }
  });
  const results = res.data.results.filter(p =>
    p.rating >= 3.5 && p.opening_hours?.open_now
  );
  const shuffled = results.sort(() => Math.random() - 0.5);
  const selected = shuffled.slice(0, 3);
  userCache.set(userId, shuffled);
  userPrevPlaces.set(userId, selected.map(p => p.place_id));
  return client.replyMessage(replyToken, createFlex(selected));
}

function createFlex(places) {
  const bubbles = places.map(p => {
    const img = p.photos?.[0]
      ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${p.photos[0].photo_reference}&key=${process.env.GOOGLE_MAPS_API_KEY}`
      : 'https://placehold.co/400x300?text=No+Image';
    return {
      type: 'bubble',
      hero: {
        type: 'image',
        url: img,
        size: 'full',
        aspectMode: 'cover',
        aspectRatio: '20:13'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          { type: 'text', text: p.name, weight: 'bold', size: 'lg', wrap: true },
          { type: 'text', text: `‚≠ê ${p.rating} ÔΩúüìç ${p.vicinity}`, size: 'sm', wrap: true, color: '#555555', margin: 'md' }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            style: 'primary',
            action: {
              type: 'postback',
              label: 'ÂêÉÈÄôÂÆ∂',
              data: JSON.stringify({
                action: 'navigate',
                name: p.name,
                latitude: p.geometry.location.lat,
                longitude: p.geometry.location.lng
              })
            }
          }
        ]
      }
    };
  });

  bubbles.push({
    type: 'bubble',
    body: {
      type: 'box',
      layout: 'vertical',
      contents: [
        {
          type: 'button',
          style: 'secondary',
          action: {
            type: 'postback',
            label: 'üîÅ ÈáçÊñ∞Êé®Ëñ¶',
            data: JSON.stringify({ action: 'recommend' })
          }
        }
      ]
    }
  });

  return {
    type: 'flex',
    altText: 'Êé®Ëñ¶ÁµêÊûú',
    contents: { type: 'carousel', contents: bubbles }
  };
}

module.exports = app;
